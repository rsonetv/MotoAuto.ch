-- 1. Add badges to profiles table
ALTER TABLE public.profiles
ADD COLUMN IF NOT EXISTS badges TEXT[] DEFAULT ARRAY[]::TEXT[];

-- 2. Create reviews table
CREATE TABLE IF NOT EXISTS public.reviews (
    id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    payment_id UUID NOT NULL REFERENCES public.payments(id) ON DELETE CASCADE,
    reviewer_id UUID NOT NULL REFERENCES public.profiles(id) ON DELETE CASCADE,
    reviewed_id UUID NOT NULL REFERENCES public.profiles(id) ON DELETE CASCADE,
    rating INT NOT NULL CHECK (rating >= 1 AND rating <= 5),
    comment TEXT,
    created_at TIMESTAMPTZ DEFAULT NOW(),
    CONSTRAINT unique_review_per_payment_user UNIQUE (payment_id, reviewer_id)
);

-- Add indexes for performance
CREATE INDEX IF NOT EXISTS idx_reviews_reviewed_id ON public.reviews(reviewed_id);
CREATE INDEX IF NOT EXISTS idx_reviews_reviewer_id ON public.reviews(reviewer_id);

-- 3. Create function to update reputation and award badges
CREATE OR REPLACE FUNCTION public.update_reputation_and_badges()
RETURNS TRIGGER AS $$
DECLARE
    avg_rating DECIMAL;
    total_sales INT;
    user_badges TEXT[];
BEGIN
    -- Calculate average rating for the reviewed user
    SELECT AVG(rating) INTO avg_rating
    FROM public.reviews
    WHERE reviewed_id = NEW.reviewed_id;

    -- Update reputation score
    UPDATE public.profiles
    SET reputation_score = avg_rating
    WHERE id = NEW.reviewed_id;

    -- Badge logic: "Wiarygodny Sprzedawca"
    -- This logic assumes we can identify sales from payments.
    -- For this example, we count reviews where the user was the one being reviewed.
    SELECT COUNT(*) INTO total_sales
    FROM public.reviews
    WHERE reviewed_id = NEW.reviewed_id;

    SELECT badges INTO user_badges FROM public.profiles WHERE id = NEW.reviewed_id;

    IF total_sales >= 5 AND avg_rating >= 4.5 AND NOT ('Wiarygodny Sprzedawca' = ANY(user_badges)) THEN
        UPDATE public.profiles
        SET badges = array_append(badges, 'Wiarygodny Sprzedawca')
        WHERE id = NEW.reviewed_id;
    END IF;
    
    -- Badge logic: "Aktywny Licytant"
    -- This requires counting bids, which is outside the scope of this trigger.
    -- This part should be handled by the application logic when a bid is placed.

    RETURN NEW;
END;
$$ LANGUAGE plpgsql;

-- 4. Create a trigger to run the function after a new review is inserted
DROP TRIGGER IF EXISTS on_new_review ON public.reviews;
CREATE TRIGGER on_new_review
AFTER INSERT ON public.reviews
FOR EACH ROW
EXECUTE FUNCTION public.update_reputation_and_badges();